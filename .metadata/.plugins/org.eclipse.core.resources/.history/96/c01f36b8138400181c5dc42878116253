package parsing_csv;

import java.util.Iterator;
import java.util.logging.Logger;
import com.google.common.base.Throwables;

import java.sql.*;

public class DatabaseConnect {
	public final ProblemLog troubleLog = new ProblemLog("javaLog");
	public final Logger log = troubleLog.logger;

	
	private final String USERNAME = "escolab";
	private final String PASSWORD = "0ykYeFtrccpQvm0x";
	private final String DRIVER = "jdbc:mysql://";
	private final String SERVER = "localhost"; // java can only connect on vulcan
	private final String PORT = "3306";
	private final String DB_NAME = "escolab";
	private final String STATEMENT = DRIVER + SERVER + ":" + PORT + "/" + DB_NAME;
	
	private enum header {
		PodID,DeploymentID,Timestamp,Latitude,Longitude,GPSTIME,NumOfSatellites,
		GPSQuality,Altitude,Temp,pH,pHmv,Cond,DOpct,DOmgl,DOgain,Turb,Depth
	}
	private final String HEADER_PODLOCATION = header.PodID+","+header.DeploymentID+","+
			header.Timestamp+","+header.Latitude+","+header.Longitude+","+header.GPSTIME+","+ 
			header.NumOfSatellites+","+header.GPSQuality+","+header.Altitude;
	
	
	
	private Iterator<CsvParsing> beanIterator;
	private Connection con = null;
	private Statement stmt = null;
	ResultSet rst = null;
	PreparedStatement insertStmt = null;
	
	public DatabaseConnect(Iterator<CsvParsing> beanIterator) {
		this.beanIterator = beanIterator;
	}

	public void connect() {
		// connect to the database
		try {
			
		} catch (SQLException sqlException) {
			log.severe(sqlException.getMessage());
			System.exit(12);
		}
	}

	public void checkFlags() {
	//look for flagged data, last 10 records
		
	}

	public void last_record() {
		// get most current record for checking
	}

	public void insertNewRecord() {
		// insert new record
		String STMT_podLocation = "INSERT"+"INTO"+ "PodLocation (PodID,DeploymentID,Timestamp,Latitude,Longitude,GPSTIME,NumOfSatellites,GPSQuality,Altitude)" +"VALUES"+"(?,?,?,?,?,?,?,?,?)";
		
		try {
			insertStmt = con.prepareStatement(STMT_podLocation);
			CsvParsing aBean = beanIterator.next();
			
			insertStmt.setInt(2, 1); //DEPLOYMENT #
			insertStmt.setDouble(8, -1214); //need to add GPS QUALITY 
			insertStmt.setDouble(9, 1214); //need to add ALTITUDE
			
			for( int i = 1; i <= 16; i++) {
				Object aBeanAttribute = null;
				
					 aBeanAttribute = aBean.getANY(i);
					
					 System.out.print(aBean.getANY(i) + " | ");
					 switch (i) {
			            case 1:  insertStmt.setInt(1, (int) aBeanAttribute);
			                     break;
			            case 2:  java.sql.Date sqlDate = new java.sql.Date(((Date) aBeanAttribute).getTime());
			            		 insertStmt.setDate(3, sqlDate);
			                     break;
			            case 3:  //battVoltage double
			                     break;
			            case 4:  //temp
			                     break;
			            case 5:  //ph
			                     break;
			            case 6:  //phmv
			                     break;
			            case 7:  //cond
			                     break;
			            case 8:  //dopct
			                     break;
			            case 9:  //domgl
			                     break;
			            case 10: //dogain
			                     break;
			            case 11: //turb
			                     break;
			            case 12: //depth
			                     break;
			            case 13: insertStmt.setDouble(4, (double) aBeanAttribute);
			            		 break;
			            case 14: insertStmt.setDouble(5, (double) aBeanAttribute);
	                    		 break;
			            case 15: insertStmt.setDouble(6, (double) aBeanAttribute);
	                     		 break;
			            case 16: insertStmt.setDouble(7, (double) aBeanAttribute);
			            		 break;
			            default: log.severe("COULD NOT ASSIGN A VARIABLE");
			                     break;
			        }
					 int cool = insertStmt.executeUpdate();
					 log.severe(Integer.toString(cool));
					 
			}
			
		} catch (SQLException sqlException) {
			log.severe(sqlException.getMessage());
		}
		
	}
//	// while(beanIterator_M.hasNext()) { // part of printing out entire CSV file
//	CsvParsing aBean = beanIterator_M.next();
//	for (int i = 0; i < 16; i++) {
//		Object aBeanAttribute = null;
//		try {
//			 aBeanAttribute = aBean.getANY(i);
//			 if(aBeanAttribute == null) {
//				 aBeanAttribute = -1;
//			 }
//		}
//		catch(Exception e) {
//			System.exit(10);
//		}
//		finally {
//		System.out.print( aBeanAttribute + " | ");
//		}
//	}
//	System.out.println("");
//}
	

	public void end_connect() {
		// clean up and end the connection to the database
	}

	public void showExample() {
		try {
			stmt = con.createStatement();
			rst = stmt.executeQuery("select * from Pod");
			String resultant = "";
			while (rst.next()) {
				System.out.println(rst.getString(1));
				resultant = resultant.concat(rst.getString(1));
			}
			log.info(resultant);
		} catch (SQLException sqlException) {
			log.severe(sqlException.getMessage());
		} finally {
			try {
				rst.close();
				stmt.close();
			} catch (SQLException sqlException) {
				log.severe(sqlException.getMessage());

			}
		}
	}

}
